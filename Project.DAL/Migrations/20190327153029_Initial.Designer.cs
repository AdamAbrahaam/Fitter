// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.DAL;

namespace Project.DAL.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20190327153029_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Project.DAL.Entity.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId");

                    b.Property<byte[]>("File");

                    b.Property<int>("FileSize");

                    b.Property<int>("FileType");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("Project.DAL.Entity.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Author");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("ParentId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Comment");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Comment");
                });

            modelBuilder.Entity("Project.DAL.Entity.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Admin");

                    b.Property<DateTime>("Created");

                    b.Property<int>("MemberCount");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Project.DAL.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Nick");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Project.DAL.Entity.UsersInTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("TeamId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersInTeam");
                });

            modelBuilder.Entity("Project.DAL.Entity.Post", b =>
                {
                    b.HasBaseType("Project.DAL.Entity.Comment");

                    b.Property<int?>("TeamId");

                    b.Property<string>("Title");

                    b.HasIndex("TeamId");

                    b.ToTable("Post");

                    b.HasDiscriminator().HasValue("Post");
                });

            modelBuilder.Entity("Project.DAL.Entity.Attachment", b =>
                {
                    b.HasOne("Project.DAL.Entity.Comment", "Comment")
                        .WithMany("Attachments")
                        .HasForeignKey("CommentId");
                });

            modelBuilder.Entity("Project.DAL.Entity.Comment", b =>
                {
                    b.HasOne("Project.DAL.Entity.Comment", "Parent")
                        .WithMany("Comments")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Project.DAL.Entity.User", b =>
                {
                    b.HasOne("Project.DAL.Entity.Comment")
                        .WithMany("Tags")
                        .HasForeignKey("CommentId");
                });

            modelBuilder.Entity("Project.DAL.Entity.UsersInTeam", b =>
                {
                    b.HasOne("Project.DAL.Entity.Team", "Team")
                        .WithMany("UsersInTeams")
                        .HasForeignKey("TeamId");

                    b.HasOne("Project.DAL.Entity.User", "User")
                        .WithMany("UsersInTeams")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Project.DAL.Entity.Post", b =>
                {
                    b.HasOne("Project.DAL.Entity.Team", "Team")
                        .WithMany("Posts")
                        .HasForeignKey("TeamId");
                });
#pragma warning restore 612, 618
        }
    }
}
