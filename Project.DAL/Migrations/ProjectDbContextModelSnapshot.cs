// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.DAL;

namespace Project.DAL.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    partial class ProjectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Project.DAL.Entity.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CurrentPostId");

                    b.Property<byte[]>("File");

                    b.Property<int>("FileSize");

                    b.Property<int>("FileType");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPostId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Project.DAL.Entity.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("CurrentAuthorId");

                    b.Property<Guid>("CurrentPostId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("CurrentAuthorId");

                    b.HasIndex("CurrentPostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Project.DAL.Entity.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("CurrentAuthorId");

                    b.Property<Guid>("CurrentTeamId");

                    b.Property<string>("Text");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CurrentAuthorId");

                    b.HasIndex("CurrentTeamId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Project.DAL.Entity.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("Admin");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Project.DAL.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CommentId");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Nick");

                    b.Property<string>("Password");

                    b.Property<Guid?>("PostId");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Project.DAL.Entity.UsersInTeam", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("TeamId");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("UsersInTeams");
                });

            modelBuilder.Entity("Project.DAL.Entity.Attachment", b =>
                {
                    b.HasOne("Project.DAL.Entity.Post", "Post")
                        .WithMany("Attachments")
                        .HasForeignKey("CurrentPostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project.DAL.Entity.Comment", b =>
                {
                    b.HasOne("Project.DAL.Entity.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("CurrentAuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Project.DAL.Entity.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("CurrentPostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project.DAL.Entity.Post", b =>
                {
                    b.HasOne("Project.DAL.Entity.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("CurrentAuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Project.DAL.Entity.Team", "Team")
                        .WithMany("Posts")
                        .HasForeignKey("CurrentTeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project.DAL.Entity.User", b =>
                {
                    b.HasOne("Project.DAL.Entity.Comment")
                        .WithMany("Tags")
                        .HasForeignKey("CommentId");

                    b.HasOne("Project.DAL.Entity.Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Project.DAL.Entity.UsersInTeam", b =>
                {
                    b.HasOne("Project.DAL.Entity.Team", "Team")
                        .WithMany("UsersInTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project.DAL.Entity.User", "User")
                        .WithMany("UsersInTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
